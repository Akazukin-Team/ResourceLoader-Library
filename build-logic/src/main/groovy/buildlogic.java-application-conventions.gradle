plugins {
    id 'application'
}

Properties props = new Properties()
try (FileInputStream fis = new FileInputStream(new File(parent.rootDir.getPath(), 'application.properties'))) {
    props.load(fis)
}


File testDir = new File(parent.projectDir.getPath(), 'run/')

tasks.withType(JavaExec).configureEach {
    doFirst {
        testDir.mkdirs()
    }
    workingDir = testDir

    standardInput = System.in
    mainClass.set(props.getProperty('mainClass'))

    jvmArgs = ['-Xms512M', '-Xmx2G',
               '-server',
               '-XX:+UnlockExperimentalVMOptions', '-XX:+UnlockDiagnosticVMOptions',
               '-XX:+UseParallelGC', '-XX:+DisableExplicitGC', '-XX:-UseGCOverheadLimit',
               '-XX:+TieredCompilation', '-XX:CompileThreshold=500', '-XX:MaxInlineSize=64',
               '-XX:+UseCompressedOops', '-XX:+UseStringDeduplication', '-XX:+OptimizeStringConcat',
               '-XX:+AlwaysPreTouch',
               '-XX:+CrashOnOutOfMemoryError', '-XX:+HeapDumpOnOutOfMemoryError',
               '-Dsun.stdout.encoding=UTF-8', '-Dsun.stderr.encoding=UTF-8']
    if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_8)) {
        jvmArgs += '-XX:+TieredCompilation'
    }
    if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_9)) {
        jvmArgs += '-XX:+UseFastAccessorMethods'
    }
    if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
        jvmArgs += '-XX:+AggressiveOpts'
    }
}
